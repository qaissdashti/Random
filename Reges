import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor

bike_rentals = pd.read_csv('bike_rental_hour.csv')
plt.hist(bike_rentals['cnt'])
bike_rentals.corr()['cnt'].sort_values()

def assign_label(hour_value):
    if hour_value >= 0 and hour_value < 6:
        return 4
    if hour_value >= 6 and hour_value < 12:
        return 1
    if hour_value >= 12 and hour_value < 18:
        return 2
    if hour_value >= 18 and hour_value < 24:
        return 3
    
assign_label(0)

bike_rentals['time_label'] = bike_rentals['hr'].apply(lambda x: assign_label(x))
train  = bike_rentals.sample(frac=0.8)
train.head()
test = bike_rentals.loc[~bike_rentals.index.isin(train.index)]
predictor = bike_rentals.columns
predictor = predictor.drop(['dteday', 'cnt', 'registered', 'casual'])
predictor = predictor.drop('instant')
train[predictor]

lr = LinearRegression()
lr.fit(train[predictor], train['cnt'])
prediction = lr.predict(test[predictor])
import numpy as np

np.mean((prediction - test['cnt'])**2)
reg = DecisionTreeRegressor(min_samples_leaf=5)
reg.fit(train[predictor], train['cnt'])
prediction_DT = reg.predict(test[predictor])
np.mean((prediction_DT - test['cnt'])**2)

rand = RandomForestRegressor(min_samples_leaf=2)
rand.fit(train[predictor], train['cnt'])
prediction_RF = rand.predict(test[predictor])
np.mean((prediction_RF - test['cnt'])**2)












